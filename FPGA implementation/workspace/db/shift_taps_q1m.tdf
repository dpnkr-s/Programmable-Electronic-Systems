--altshift_taps CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone II" NUMBER_OF_TAPS=1 TAP_DISTANCE=3 WIDTH=16 clock shiftin taps CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CYCLONEII_M4K_COMPATIBILITY="ON" LOW_POWER_MODE="AUTO"
--VERSION_BEGIN 9.0SP2 cbx_altdpram 2009:05:19:16:53:07:SJ cbx_altshift_taps 2009:05:21:09:54:24:SJ cbx_altsyncram 2009:05:19:16:53:16:SJ cbx_cycloneii 2008:05:19:10:57:37:SJ cbx_lpm_add_sub 2009:05:07:10:25:28:SJ cbx_lpm_compare 2009:02:03:01:43:16:SJ cbx_lpm_counter 2008:05:19:10:42:20:SJ cbx_lpm_decode 2008:05:19:10:39:27:SJ cbx_lpm_mux 2009:03:31:01:01:28:SJ cbx_mgl 2009:02:26:16:06:21:SJ cbx_stratix 2008:09:18:16:08:35:SJ cbx_stratixii 2008:11:14:16:08:42:SJ cbx_stratixiii 2009:05:12:13:36:56:SJ cbx_util_mgl 2008:11:21:14:58:47:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION altsyncram_hg31 (address_a[1..0], address_b[1..0], clock0, clock1, clocken0, clocken1, data_a[15..0], wren_a)
RETURNS ( q_b[15..0]);
FUNCTION add_sub_gvd (dataa[1..0], datab[1..0])
RETURNS ( result[1..0]);
FUNCTION cntr_kkf (clk_en, clock)
RETURNS ( q[1..0]);

--synthesis_resources = lut 2 M4K 1 reg 4 
SUBDESIGN shift_taps_q1m
( 
	clock	:	input;
	shiftin[15..0]	:	input;
	shiftout[15..0]	:	output;
	taps[15..0]	:	output;
) 
VARIABLE 
	altsyncram4 : altsyncram_hg31;
	dffe3a[1..0] : dffe;
	add_sub2 : add_sub_gvd;
	cntr1 : cntr_kkf;
	clken	: NODE;
	rdaddress[1..0]	: WIRE;

BEGIN 
	altsyncram4.address_a[] = cntr1.q[];
	altsyncram4.address_b[] = rdaddress[];
	altsyncram4.clock0 = clock;
	altsyncram4.clock1 = clock;
	altsyncram4.clocken0 = clken;
	altsyncram4.clocken1 = clken;
	altsyncram4.data_a[] = ( shiftin[]);
	altsyncram4.wren_a = B"1";
	dffe3a[].clk = clock;
	dffe3a[].d = ( (! add_sub2.result[1..1]), add_sub2.result[0..0]);
	dffe3a[].ena = clken;
	add_sub2.dataa[] = cntr1.q[];
	add_sub2.datab[] = B"00";
	cntr1.clk_en = clken;
	cntr1.clock = clock;
	clken = VCC;
	rdaddress[] = ( (! dffe3a[1..1].q), dffe3a[0..0].q);
	shiftout[15..0] = altsyncram4.q_b[15..0];
	taps[] = altsyncram4.q_b[];
END;
--VALID FILE
